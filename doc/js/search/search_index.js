var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/DLNode.html",[0,0.219,1,0.395]],["body/classes/DLNode.html",[0,0.253,1,0.71,2,0.698,3,0.982,4,0.982,5,0.698,6,0.982,7,0.698,8,1.567,9,0.698,10,0.982,11,0.698,12,1.413,13,3.173,14,1.413,15,2.205,16,2.205,17,0.698,18,1.419,19,2.171,20,2.399,21,2.399,22,2.399,23,1.419,24,1.667,25,2.205,26,2.043,27,1.185,28,0.139,29,2.628,30,1.67,31,2.399,32,1.667,33,1.413,34,1.419,35,1.413,36,2.628,37,2.628,38,1.413,39,1.413,40,1.413,41,1.413,42,1.667,43,1.667,44,1.667,45,1.667,46,1.667,47,1.413,48,1.413,49,1.413,50,1.413,51,1.413,52,1.413,53,1.413,54,1.413,55,0.982,56,1.667,57,2.043,58,2.043,59,2.043,60,1.667,61,0.054,62,0.079,63,0.054]],["title/classes/DoublyLinkedList.html",[0,0.219,64,0.606]],["body/classes/DoublyLinkedList.html",[0,0.205,1,0.706,2,0.389,3,0.547,4,0.547,5,0.389,7,1.128,8,1.678,9,0.641,11,1.626,17,1.524,18,0.902,19,1.817,23,0.902,24,1.15,25,2.144,27,1.246,28,0.139,30,1.44,32,0.902,42,1.678,43,1.678,44,1.678,45,2.144,46,1.959,55,0.547,56,1.678,60,0.902,61,0.03,62,0.05,63,0.03,64,0.446,65,0.547,66,0.902,67,0.902,68,1.655,69,1.655,70,1.655,71,1.297,72,3.193,73,1.655,74,1.297,75,1.655,76,1.655,77,1.297,78,2.414,79,1.655,80,1.655,81,1.919,82,1.655,83,1.918,84,1.918,85,1.655,86,1.297,87,0.787,88,1.15,89,2.871,90,1.475,91,0.787,92,0.787,93,0.787,94,1.919,95,0.787,96,0.787,97,1.655,98,0.902,99,1.297,100,0.787,101,0.787,102,0.787,103,0.787,104,0.787,105,0.547,106,0.787,107,0.787,108,0.787,109,0.787,110,0.787,111,0.787,112,2.283,113,1.297,114,2.283,115,1.655,116,0.787,117,0.787,118,0.787,119,0.787,120,0.787,121,1.919,122,1.333,123,1.297,124,1.297,125,0.902,126,0.787,127,1.587,128,0.787,129,0.787,130,0.787,131,0.787,132,0.787,133,0.787,134,0.787,135,0.787,136,0.787,137,0.787,138,0.787,139,0.547,140,1.655,141,1.655,142,1.919,143,1.655,144,0.787,145,1.919,146,1.655,147,2.283,148,1.919,149,0.787,150,0.787,151,0.787,152,0.787,153,0.787,154,0.787,155,0.787,156,0.787,157,0.787,158,0.787,159,1.297,160,0.787,161,0.389,162,0.787,163,0.787]],["title/coverage.html",[164,1.658]],["body/coverage.html",[0,0.375,1,0.573,5,1.265,6,1.78,27,1.265,28,0.128,61,0.099,62,0.116,63,0.099,64,0.88,65,1.78,161,1.265,164,1.78,165,1.265,166,2.561,167,2.561,168,2.561,169,2.561,170,2.561,171,2.561,172,2.561,173,2.561]],["title/index.html",[17,0.733,174,1.031,175,1.031]],["body/index.html",[0,0.286,1,0.666,7,0.829,8,1.641,9,1.139,10,1.167,11,1.641,15,1.167,16,1.167,28,0.137,30,1.401,34,1.167,61,0.065,62,0.089,63,0.065,64,0.975,66,2.135,67,2.135,83,1.167,84,1.167,88,1.603,90,1.831,105,1.167,122,1.603,127,1.603,139,1.167,161,1.301,165,1.301,176,2.635,177,1.68,178,2.307,179,2.307,180,1.68,181,1.68,182,1.68,183,1.68,184,1.68,185,2.307,186,1.167,187,1.68,188,2.307,189,2.307,190,2.307,191,1.68,192,1.68,193,1.68,194,1.68,195,2.837,196,1.68,197,2.307,198,1.68,199,1.68,200,1.68,201,1.68,202,1.68,203,1.68,204,1.68,205,1.68,206,1.68,207,1.68,208,1.68,209,1.68,210,1.68,211,1.68,212,1.68,213,1.68,214,1.68,215,1.68,216,2.307,217,1.68,218,1.68,219,1.68,220,1.68,221,1.68,222,1.68,223,1.68,224,1.68]],["title/license.html",[174,1.031,175,1.031,225,1.031]],["body/license.html",[28,0.101,61,0.079,62,0.101,63,0.079,98,1.418,125,1.418,165,1.008,186,1.418,225,1.418,226,2.04,227,2.904,228,2.04,229,2.04,230,2.04,231,2.04,232,2.626,233,2.04,234,2.04,235,2.04,236,2.04,237,2.04,238,2.04,239,2.626,240,3.38,241,2.04,242,2.04,243,2.904,244,2.04,245,2.626,246,2.04,247,2.04,248,2.626,249,2.04,250,2.04,251,2.04,252,2.04,253,2.04,254,2.04,255,2.04,256,2.626,257,2.04,258,2.04,259,2.04,260,2.04,261,2.04,262,2.04,263,2.04,264,2.626,265,2.626,266,2.04,267,2.04,268,2.04,269,2.04,270,2.04,271,2.04,272,2.04,273,2.04,274,2.04,275,2.04,276,2.04,277,2.04,278,2.04,279,2.04,280,2.04,281,2.04,282,2.04,283,2.04,284,2.04,285,2.04,286,2.04,287,2.04,288,2.04,289,2.04,290,2.04,291,2.04,292,2.04,293,2.04,294,2.04]],["title/modules.html",[295,1.658]],["body/modules.html",[28,0.122,61,0.106,62,0.122,63,0.106,295,1.916]],["title/overview.html",[296,1.658]],["body/overview.html",[2,1.351,28,0.121,61,0.105,62,0.121,63,0.105,296,1.901,297,2.736]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":143,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["1",{"_index":115,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["14/15",{"_index":171,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":297,"title":{},"body":{"overview.html":{}}}],["2019",{"_index":229,"title":{},"body":{"license.html":{}}}],["300",{"_index":218,"title":{},"body":{"index.html":{}}}],["4/5",{"_index":169,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":220,"title":{},"body":{"index.html":{}}}],["80",{"_index":168,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":170,"title":{},"body":{"coverage.html":{}}}],["_data",{"_index":20,"title":{},"body":{"classes/DLNode.html":{}}}],["_end",{"_index":68,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["_length",{"_index":69,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["_next",{"_index":21,"title":{},"body":{"classes/DLNode.html":{}}}],["_previous",{"_index":22,"title":{},"body":{"classes/DLNode.html":{}}}],["_start",{"_index":70,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["above",{"_index":263,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":23,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["action",{"_index":289,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":254,"title":{},"body":{"license.html":{}}}],["api",{"_index":205,"title":{},"body":{"index.html":{}}}],["arising",{"_index":292,"title":{},"body":{"license.html":{}}}],["array",{"_index":127,"title":{},"body":{"classes/DoublyLinkedList.html":{},"index.html":{}}}],["associated",{"_index":241,"title":{},"body":{"license.html":{}}}],["authors",{"_index":282,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":123,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["bounds",{"_index":99,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["build",{"_index":182,"title":{},"body":{"index.html":{}}}],["built",{"_index":184,"title":{},"body":{"index.html":{}}}],["c",{"_index":228,"title":{},"body":{"license.html":{}}}],["charge",{"_index":236,"title":{},"body":{"license.html":{}}}],["claim",{"_index":285,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"overview.html":{}}}],["clear",{"_index":73,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["clears",{"_index":93,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["complete",{"_index":204,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":210,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":262,"title":{},"body":{"license.html":{}}}],["connection",{"_index":293,"title":{},"body":{"license.html":{}}}],["console.log(array",{"_index":224,"title":{},"body":{"index.html":{}}}],["constructor",{"_index":24,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["contained",{"_index":34,"title":{},"body":{"classes/DLNode.html":{},"index.html":{}}}],["contains",{"_index":12,"title":{},"body":{"classes/DLNode.html":{}}}],["contract",{"_index":290,"title":{},"body":{"license.html":{}}}],["copies",{"_index":256,"title":{},"body":{"license.html":{}}}],["copy",{"_index":239,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":227,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":164,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["currentnode",{"_index":159,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["damages",{"_index":286,"title":{},"body":{"license.html":{}}}],["dame",{"_index":230,"title":{},"body":{"license.html":{}}}],["data",{"_index":13,"title":{},"body":{"classes/DLNode.html":{}}}],["data|t",{"_index":191,"title":{},"body":{"index.html":{}}}],["deal",{"_index":242,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":294,"title":{},"body":{"license.html":{}}}],["default",{"_index":31,"title":{},"body":{"classes/DLNode.html":{}}}],["defined",{"_index":25,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["delete",{"_index":74,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["delete(index",{"_index":95,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["deleted",{"_index":102,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["deleteend",{"_index":75,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["deletes",{"_index":94,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["deletestart",{"_index":76,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["deleting",{"_index":221,"title":{},"body":{"index.html":{}}}],["deletion",{"_index":100,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["demo",{"_index":211,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"index.html":{}}}],["distribute",{"_index":252,"title":{},"body":{"license.html":{}}}],["dl",{"_index":181,"title":{},"body":{"index.html":{}}}],["dlnode",{"_index":1,"title":{"classes/DLNode.html":{}},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{}}}],["dlnode.ts",{"_index":6,"title":{},"body":{"classes/DLNode.html":{},"coverage.html":{}}}],["dlnode.ts:13",{"_index":35,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:18",{"_index":26,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:22",{"_index":39,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:25",{"_index":48,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:28",{"_index":52,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:32",{"_index":41,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:35",{"_index":50,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:38",{"_index":54,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:8",{"_index":33,"title":{},"body":{"classes/DLNode.html":{}}}],["doc/index.html",{"_index":203,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":165,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["doubly",{"_index":66,"title":{},"body":{"classes/DoublyLinkedList.html":{},"index.html":{}}}],["doublylinkedlist",{"_index":64,"title":{"classes/DoublyLinkedList.html":{}},"body":{"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{}}}],["doublylinkedlist.ts",{"_index":65,"title":{},"body":{"classes/DoublyLinkedList.html":{},"coverage.html":{}}}],["doublylinkedlist.ts:10",{"_index":91,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:134",{"_index":104,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:15",{"_index":87,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:155",{"_index":103,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:177",{"_index":96,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:20",{"_index":86,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:211",{"_index":107,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:228",{"_index":126,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:249",{"_index":92,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:28",{"_index":130,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:31",{"_index":134,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:34",{"_index":138,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:38",{"_index":132,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:41",{"_index":136,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:49",{"_index":120,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:57",{"_index":119,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:76",{"_index":117,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:96",{"_index":111,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["edge",{"_index":36,"title":{},"body":{"classes/DLNode.html":{}}}],["empty",{"_index":122,"title":{},"body":{"classes/DoublyLinkedList.html":{},"index.html":{}}}],["end",{"_index":84,"title":{},"body":{"classes/DoublyLinkedList.html":{},"index.html":{}}}],["end|dlnode",{"_index":200,"title":{},"body":{"index.html":{}}}],["event",{"_index":281,"title":{},"body":{"license.html":{}}}],["export",{"_index":55,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["express",{"_index":272,"title":{},"body":{"license.html":{}}}],["false",{"_index":124,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["fields",{"_index":189,"title":{},"body":{"index.html":{}}}],["field|type|getter|setter|description",{"_index":190,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{}}}],["files",{"_index":186,"title":{},"body":{"index.html":{},"license.html":{}}}],["first",{"_index":105,"title":{},"body":{"classes/DoublyLinkedList.html":{},"index.html":{}}}],["fitness",{"_index":277,"title":{},"body":{"license.html":{}}}],["following",{"_index":261,"title":{},"body":{"license.html":{}}}],["for(i=0",{"_index":160,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["for(let",{"_index":213,"title":{},"body":{"index.html":{}}}],["free",{"_index":235,"title":{},"body":{"license.html":{}}}],["furnished",{"_index":259,"title":{},"body":{"license.html":{}}}],["generated",{"_index":208,"title":{},"body":{"index.html":{}}}],["generic)|yes|yes|data",{"_index":192,"title":{},"body":{"index.html":{}}}],["getdata",{"_index":38,"title":{},"body":{"classes/DLNode.html":{}}}],["getend",{"_index":133,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["getlength",{"_index":137,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["getnext",{"_index":47,"title":{},"body":{"classes/DLNode.html":{}}}],["getnode",{"_index":77,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["getnode(index",{"_index":106,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["getprevious",{"_index":51,"title":{},"body":{"classes/DLNode.html":{}}}],["getstart",{"_index":129,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["getting",{"_index":174,"title":{"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":234,"title":{},"body":{"license.html":{}}}],["hereby",{"_index":233,"title":{},"body":{"license.html":{}}}],["holders",{"_index":283,"title":{},"body":{"license.html":{}}}],["i=0",{"_index":214,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":166,"title":{},"body":{"coverage.html":{}}}],["if(index",{"_index":157,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["if(index==0",{"_index":155,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["if(this.end!=null",{"_index":153,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["if(this.isempty",{"_index":146,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["if(this.length==0",{"_index":162,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["if(this.start!=null",{"_index":150,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["implementation",{"_index":9,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"index.html":{}}}],["implemented",{"_index":187,"title":{},"body":{"index.html":{}}}],["implied",{"_index":273,"title":{},"body":{"license.html":{}}}],["import",{"_index":139,"title":{},"body":{"classes/DoublyLinkedList.html":{},"index.html":{}}}],["included",{"_index":266,"title":{},"body":{"license.html":{}}}],["including",{"_index":245,"title":{},"body":{"license.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["insert",{"_index":78,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["insert(node",{"_index":110,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["inserted",{"_index":114,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["insertend",{"_index":79,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["insertend(node",{"_index":116,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["inserting",{"_index":215,"title":{},"body":{"index.html":{}}}],["inserts",{"_index":112,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["insertstart",{"_index":80,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["insertstart(node",{"_index":118,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["install",{"_index":180,"title":{},"body":{"index.html":{}}}],["installation",{"_index":177,"title":{},"body":{"index.html":{}}}],["isempty",{"_index":81,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["js",{"_index":185,"title":{},"body":{"index.html":{}}}],["kind",{"_index":271,"title":{},"body":{"license.html":{}}}],["last",{"_index":88,"title":{},"body":{"classes/DoublyLinkedList.html":{},"index.html":{}}}],["length",{"_index":85,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["length|number|yes|no|number",{"_index":198,"title":{},"body":{"index.html":{}}}],["liability",{"_index":287,"title":{},"body":{"license.html":{}}}],["liable",{"_index":284,"title":{},"body":{"license.html":{}}}],["license",{"_index":225,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":246,"title":{},"body":{"license.html":{}}}],["limited",{"_index":274,"title":{},"body":{"license.html":{}}}],["linked",{"_index":67,"title":{},"body":{"classes/DoublyLinkedList.html":{},"index.html":{}}}],["list",{"_index":11,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"index.html":{}}}],["list.delete(4",{"_index":222,"title":{},"body":{"index.html":{}}}],["list.insert",{"_index":219,"title":{},"body":{"index.html":{}}}],["list.toarray",{"_index":223,"title":{},"body":{"index.html":{}}}],["lyngdoh",{"_index":231,"title":{},"body":{"license.html":{}}}],["matching",{"_index":62,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["merchantability",{"_index":276,"title":{},"body":{"license.html":{}}}],["merge",{"_index":250,"title":{},"body":{"license.html":{}}}],["methods",{"_index":71,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["mit",{"_index":226,"title":{},"body":{"license.html":{}}}],["modify",{"_index":249,"title":{},"body":{"license.html":{}}}],["modules",{"_index":295,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":43,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["new",{"_index":161,"title":{},"body":{"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{}}}],["newnode",{"_index":216,"title":{},"body":{"index.html":{}}}],["newnode.data",{"_index":217,"title":{},"body":{"index.html":{}}}],["next",{"_index":15,"title":{},"body":{"classes/DLNode.html":{},"index.html":{}}}],["next|dlnode",{"_index":194,"title":{},"body":{"index.html":{}}}],["node",{"_index":8,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"index.html":{}}}],["node.next",{"_index":149,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["node.previous",{"_index":152,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["node_modules/dl",{"_index":212,"title":{},"body":{"index.html":{}}}],["nodes",{"_index":90,"title":{},"body":{"classes/DoublyLinkedList.html":{},"index.html":{}}}],["noninfringement",{"_index":280,"title":{},"body":{"license.html":{}}}],["notice",{"_index":264,"title":{},"body":{"license.html":{}}}],["npm",{"_index":178,"title":{},"body":{"index.html":{}}}],["null",{"_index":30,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"index.html":{}}}],["null|yes|yes|reference",{"_index":195,"title":{},"body":{"index.html":{}}}],["number",{"_index":89,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["object",{"_index":193,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":238,"title":{},"body":{"license.html":{}}}],["occur",{"_index":101,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["optional",{"_index":44,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["order",{"_index":128,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["otherwise",{"_index":125,"title":{},"body":{"classes/DoublyLinkedList.html":{},"license.html":{}}}],["out",{"_index":98,"title":{},"body":{"classes/DoublyLinkedList.html":{},"license.html":{}}}],["overview",{"_index":296,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["param",{"_index":145,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["parameters",{"_index":42,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["particular",{"_index":278,"title":{},"body":{"license.html":{}}}],["permission",{"_index":232,"title":{},"body":{"license.html":{}}}],["permit",{"_index":257,"title":{},"body":{"license.html":{}}}],["person",{"_index":237,"title":{},"body":{"license.html":{}}}],["persons",{"_index":258,"title":{},"body":{"license.html":{}}}],["please",{"_index":201,"title":{},"body":{"index.html":{}}}],["pointer",{"_index":37,"title":{},"body":{"classes/DLNode.html":{}}}],["pointers",{"_index":14,"title":{},"body":{"classes/DLNode.html":{}}}],["portions",{"_index":268,"title":{},"body":{"license.html":{}}}],["preious|dlnode",{"_index":196,"title":{},"body":{"index.html":{}}}],["present",{"_index":197,"title":{},"body":{"index.html":{}}}],["previous",{"_index":16,"title":{},"body":{"classes/DLNode.html":{},"index.html":{}}}],["private",{"_index":19,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["project",{"_index":207,"title":{},"body":{"index.html":{}}}],["properties",{"_index":18,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["provided",{"_index":269,"title":{},"body":{"license.html":{}}}],["public",{"_index":72,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["publish",{"_index":251,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":279,"title":{},"body":{"license.html":{}}}],["refer",{"_index":202,"title":{},"body":{"index.html":{}}}],["reference",{"_index":206,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":244,"title":{},"body":{"license.html":{}}}],["result",{"_index":61,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":63,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["retrieve",{"_index":109,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["retrieves",{"_index":108,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["return",{"_index":56,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["returns",{"_index":45,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["rights",{"_index":247,"title":{},"body":{"license.html":{}}}],["sell",{"_index":255,"title":{},"body":{"license.html":{}}}],["set",{"_index":60,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["setdata(data",{"_index":40,"title":{},"body":{"classes/DLNode.html":{}}}],["setend(end",{"_index":135,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["setnext(next",{"_index":49,"title":{},"body":{"classes/DLNode.html":{}}}],["setprevious(previous",{"_index":53,"title":{},"body":{"classes/DLNode.html":{}}}],["setstart(start",{"_index":131,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["sh",{"_index":179,"title":{},"body":{"index.html":{}}}],["shall",{"_index":265,"title":{},"body":{"license.html":{}}}],["software",{"_index":240,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["specific",{"_index":97,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["specified",{"_index":113,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["start",{"_index":83,"title":{},"body":{"classes/DoublyLinkedList.html":{},"index.html":{}}}],["started",{"_index":175,"title":{"index.html":{},"license.html":{}},"body":{}}],["start|dlnode",{"_index":199,"title":{},"body":{"index.html":{}}}],["statements",{"_index":167,"title":{},"body":{"coverage.html":{}}}],["subject",{"_index":260,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":253,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":267,"title":{},"body":{"license.html":{}}}],["t",{"_index":29,"title":{},"body":{"classes/DLNode.html":{}}}],["table",{"_index":173,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":172,"title":{},"body":{"coverage.html":{}}}],["this._data",{"_index":57,"title":{},"body":{"classes/DLNode.html":{}}}],["this._end",{"_index":141,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this._length",{"_index":142,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this._next",{"_index":58,"title":{},"body":{"classes/DLNode.html":{}}}],["this._previous",{"_index":59,"title":{},"body":{"classes/DLNode.html":{}}}],["this._start",{"_index":140,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.end",{"_index":148,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.end.next",{"_index":154,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.insertend(node",{"_index":158,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.insertstart(node",{"_index":156,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.length==0",{"_index":144,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.start",{"_index":147,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.start.previous",{"_index":151,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["three",{"_index":188,"title":{},"body":{"index.html":{}}}],["toarray",{"_index":82,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["tort",{"_index":291,"title":{},"body":{"license.html":{}}}],["true",{"_index":121,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["tsc",{"_index":183,"title":{},"body":{"index.html":{}}}],["type",{"_index":27,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{}}}],["typescript",{"_index":176,"title":{},"body":{"index.html":{}}}],["use",{"_index":248,"title":{},"body":{"license.html":{}}}],["using",{"_index":209,"title":{},"body":{"index.html":{}}}],["value",{"_index":32,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["vertex",{"_index":10,"title":{},"body":{"classes/DLNode.html":{},"index.html":{}}}],["void",{"_index":46,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["warranties",{"_index":275,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":270,"title":{},"body":{"license.html":{}}}],["whether",{"_index":288,"title":{},"body":{"license.html":{}}}],["while(currentnode!=null",{"_index":163,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["without",{"_index":243,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DLNode.html":{"url":"classes/DLNode.html","title":"class - DLNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DLNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            dlnode.ts\n        \n\n            \n                Description\n            \n            \n                Node implementation class. A node is a vertex in the list which contains data and pointers to the next node and previous node.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _data\n                            \n                            \n                                    Private\n                                _next\n                            \n                            \n                                    Private\n                                _previous\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    data\n                                \n                                \n                                    next\n                                \n                                \n                                    previous\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in dlnode.ts:18\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T | null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in dlnode.ts:8\n                            \n                        \n\n                \n                    \n                        The data contained in the node.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _next\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DLNode | null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in dlnode.ts:13\n                            \n                        \n\n                \n                    \n                        The edge or pointer to the next node.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _previous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DLNode | null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in dlnode.ts:18\n                            \n                        \n\n                \n                    \n                        The edge or pointer to the previous node.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:22\n                                \n                            \n\n                \n                    \n                        setdata(data)\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:32\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            data\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        next\n                    \n                \n\n                \n                    \n                        getnext()\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:25\n                                \n                            \n\n                \n                    \n                        setnext(next)\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:35\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            next\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        previous\n                    \n                \n\n                \n                    \n                        getprevious()\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:28\n                                \n                            \n\n                \n                    \n                        setprevious(previous)\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:38\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            previous\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        export class DLNode {\n    /**\n     * The data contained in the node.\n     */\n    private _data : T | null = null;\n    \n    /**\n     * The edge or pointer to the next node.\n     */\n    private _next : DLNode | null = null;\n    \n    /**\n     * The edge or pointer to the previous node.\n     */\n    private _previous : DLNode | null = null;\n\n    constructor() {}\n\n    get data() : T | null {\n        return this._data;\n    }\n    get next() : DLNode | null {\n        return this._next;\n    }\n    get previous() : DLNode | null {\n        return this._previous;\n    }\n\n    set data( data : T | null ) {\n        this._data = data;\n    }\n    set next( next : DLNode | null ) {\n        this._next = next;\n    }\n    set previous( previous : DLNode | null ) {\n        this._previous = previous;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DoublyLinkedList.html":{"url":"classes/DoublyLinkedList.html","title":"class - DoublyLinkedList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DoublyLinkedList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            doublyLinkedList.ts\n        \n\n            \n                Description\n            \n            \n                Doubly Linked-List implementation class.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _end\n                            \n                            \n                                    Private\n                                _length\n                            \n                            \n                                    Private\n                                _start\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                deleteEnd\n                            \n                            \n                                    Public\n                                deleteStart\n                            \n                            \n                                    Public\n                                getNode\n                            \n                            \n                                    Public\n                                insert\n                            \n                            \n                                    Public\n                                insertEnd\n                            \n                            \n                                    Public\n                                insertStart\n                            \n                            \n                                    Public\n                                isEmpty\n                            \n                            \n                                    Public\n                                toArray\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    start\n                                \n                                \n                                    end\n                                \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in doublyLinkedList.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _end\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DLNode | null\n\n                        \n                    \n                        \n                            \n                                    Defined in doublyLinkedList.ts:15\n                            \n                        \n\n                \n                    \n                        The last  node of the list.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _length\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in doublyLinkedList.ts:20\n                            \n                        \n\n                \n                    \n                        The number of nodes in the list.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _start\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DLNode | null\n\n                        \n                    \n                        \n                            \n                                    Defined in doublyLinkedList.ts:10\n                            \n                        \n\n                \n                    \n                        The start node of the list.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:249\n                \n            \n\n\n            \n                \n                    Clears the list and deletes all nodes.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(index: number)\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:177\n                \n            \n\n\n            \n                \n                    Deletes a node from a specific index in the list. If the index is out of bounds, then no deletion will occur.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The index of the node to be deleted.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteEnd\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEnd()\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:155\n                \n            \n\n\n            \n                \n                    Deletes the last node from the list.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteStart\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteStart()\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:134\n                \n            \n\n\n            \n                \n                    Deletes the first node from the list.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNode(index: number)\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:211\n                \n            \n\n\n            \n                \n                    Retrieves a node from the specific index.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The index from which to retrieve the node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DLNode | null\n\n                    \n                    \n                        Returns the node at the specific index or null if the index is out of bounds.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            insert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(node: DLNode, index: number)\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:96\n                \n            \n\n\n            \n                \n                    Inserts a node at the specified index in the list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DLNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The node to be inserted to the list.\n\n                                    \n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The index to insert the node at. A value of -1 will insert the node to the end of the list.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            insertEnd\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insertEnd(node: DLNode)\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:76\n                \n            \n\n\n            \n                \n                    Inserts a node to the end of the list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DLNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The node to be inserted to the list.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            insertStart\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insertStart(node: DLNode)\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:57\n                \n            \n\n\n            \n                \n                    Inserts a node to the start of the list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DLNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The node to be inserted to the list.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isEmpty\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmpty()\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:49\n                \n            \n\n\n            \n                \n                    Returns true if the list is empty.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Returns true if list is empty or false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toArray\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toArray()\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:228\n                \n            \n\n\n            \n                \n                    Returns an array of the nodes in the order of the list.\n\n\n                    \n                    \n                    \n                        Returns :         Array>\n\n                    \n                    \n                        Array of nodes.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        start\n                    \n                \n\n                \n                    \n                        getstart()\n                    \n                \n                            \n                                \n                                    Defined in doublyLinkedList.ts:28\n                                \n                            \n\n                \n                    \n                        setstart(start)\n                    \n                \n                            \n                                \n                                    Defined in doublyLinkedList.ts:38\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            start\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        end\n                    \n                \n\n                \n                    \n                        getend()\n                    \n                \n                            \n                                \n                                    Defined in doublyLinkedList.ts:31\n                                \n                            \n\n                \n                    \n                        setend(end)\n                    \n                \n                            \n                                \n                                    Defined in doublyLinkedList.ts:41\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            end\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in doublyLinkedList.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DLNode } from \"./dlnode\";\n\n/**\n * Doubly Linked-List implementation class.\n */\nexport class DoublyLinkedList {\n    /**\n     * The start node of the list.\n     */\n    private _start : DLNode | null;\n    \n    /**\n     * The last  node of the list.\n     */\n    private _end : DLNode | null;\n    \n    /**\n     * The number of nodes in the list.\n     */\n    private _length : number;\n\n    constructor() {\n        this._start = null;\n        this._end = null;\n        this._length = 0;\n    }\n\n    get start() : DLNode | null {\n        return this._start;\n    }\n    get end() : DLNode | null {\n        return this._end;\n    }\n    get length() : number {\n        return this._length;\n    }\n\n    set start( start : DLNode | null ) {\n        this._start = start;\n    }\n    set end( end : DLNode | null ) {\n        this._end = end;\n    }\n\n    /**\n     * Returns true if the list is empty.\n     * @returns Returns true if list is empty or false otherwise.\n     */\n    public isEmpty() : boolean {\n        return this.length==0;\n    }\n\n    /**\n     * Inserts a node to the start of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertStart( node : DLNode ) : void {\n        if(this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.next = this.start;\n            if(this.start!=null) {\n                this.start.previous = node;\n            }\n            this.start = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node to the end of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertEnd( node : DLNode ) : void {\n        if(this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.previous = this.end;\n            if(this.end!=null){\n                this.end.next = node;\n            }\n            this.end = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node at the specified index in the list.\n     * @param node The node to be inserted to the list.\n     * @param index The index to insert the node at. A value of -1 will insert the node to the end of the list.\n     */\n    public insert( node : DLNode, index : number ) : void {\n        if(index==0) {\n            this.insertStart(node);\n            return;\n        }\n        else if(index==-1) {\n            this.insertEnd(node);\n            return;\n        }\n\n        let currentNode = this.start;\n        let i : number = 0;\n        for(i=0; i | null {\n        if(this.isEmpty() || index > {\n        let array : DLNode[] = new Array>();\n        \n        if(this.length==0) {\n            return array;\n        }\n        \n        let i = 0;\n\n        let currentNode : DLNode | null = this.start;\n        while(currentNode!=null && i \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                dlnode.ts\n            \n            class\n            DLNode\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                doublyLinkedList.ts\n            \n            class\n            DoublyLinkedList\n            \n                93 %\n                (14/15)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDoubly Linked List for TypeScript\nA doubly linked-list implementation for TypeScript.\nInstallation\nNPM\nsh\nnpm install dl-doubly-linked-list\nBuild\nsh\ntsc\nBuilt JS files are in ./js.\nDescription\nNode\nA node is a vertex in the list, implemented in the DLNode class and has three fields:\n|Field|Type|Getter|Setter|Description|\n|-|-|-|-|-|\n|data|T (generic)|Yes|Yes|Data object contained in the node.|\n|next|DLNode | null|Yes|Yes|Reference to next node, null if its last node.|\n|preious|DLNode | null|Yes|Yes|Reference to previous node. null if its first node.|\nDoubly Linked List\nThe doubly linked-list implementation is present in the DoublyLinkedList class. It has three fields:\n|Field|Type|Getter|Setter|Description|\n|-|-|-|-|-|\n|length|number|Yes|No|Number of nodes present in the list.|\n|start|DLNode | null|Yes|Yes|Reference to start node, null if list is empty.|\n|end|DLNode | null|Yes|Yes|Reference to last node. null if list is empty.|\nDocumentation\nPlease refer to doc/index.html for the complete documentation and API reference. The documentation for this project was generated using Compodoc.\nDemo\n```typescript\nimport { DoublyLinkedList, DLNode } from \"./node_modules/dl-doubly-linked-list\";\nlet list : DoublyLinkedList = new DoublyLinkedList();\nlet nodes : DLNode[] = [];\nfor(let i=0; i\n// Inserting new node at the end\nlet newNode : DLNode = new DLNode();\nnewNode.data = 300;\nlist.insert( newNode, 6 );\n// Deleting a node\nlist.delete(4);\n// Get array of the nodes\nlet array = list.toArray();\nconsole.log(array);\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Dame Lyngdoh\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
