var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/DLNode.html",[0,0.526,1,0.526]],["body/classes/DLNode.html",[0,0.553,1,0.909,2,0.712,3,0.966,4,0.966,5,0.712,6,0.966,7,0.966,8,2.364,9,0.966,10,1.351,11,0.523,12,1.351,13,3.307,14,1.351,15,3.307,16,3.307,17,0.523,18,1.438,19,2.323,20,2.404,21,2.404,22,2.404,23,1.438,24,1.719,25,2.364,26,2.012,27,0.93,28,0.122,29,2.664,30,2.547,31,1.719,32,1.267,33,1.351,34,2.012,35,1.351,36,2.664,37,2.664,38,1.351,39,1.351,40,1.351,41,1.351,42,1.719,43,1.719,44,1.719,45,1.719,46,1.719,47,1.351,48,1.351,49,1.351,50,1.351,51,1.351,52,1.351,53,1.351,54,1.351,55,0.966,56,1.719,57,2.012,58,2.012,59,2.012,60,1.719,61,0.043,62,0.064,63,0.043]],["title/classes/DoublyLinkedList.html",[0,0.526,64,0.741]],["body/classes/DoublyLinkedList.html",[0,0.434,1,0.9,2,0.379,3,0.514,4,0.514,5,0.379,7,1.613,8,2.557,9,0.869,11,1.332,17,1.234,18,0.869,19,1.881,23,0.869,24,1.13,25,2.28,27,0.977,28,0.122,30,2.134,32,0.641,42,1.718,43,1.718,44,1.718,45,2.28,46,2.051,55,0.514,56,1.718,60,0.869,61,0.023,62,0.039,63,0.023,64,0.47,65,0.514,66,1.216,67,1.216,68,1.58,69,1.58,70,1.58,71,1.216,72,3.321,73,1.58,74,1.216,75,1.58,76,1.58,77,1.216,78,2.403,79,1.58,80,1.58,81,1.858,82,1.58,83,2.8,84,2.8,85,1.58,86,1.216,87,0.719,88,1.58,89,2.931,90,1.095,91,0.719,92,0.719,93,0.719,94,1.858,95,0.719,96,0.719,97,1.58,98,0.869,99,1.216,100,0.719,101,0.719,102,0.719,103,0.719,104,0.719,105,0.719,106,0.719,107,0.719,108,0.719,109,0.719,110,0.719,111,0.719,112,2.256,113,1.216,114,2.256,115,1.58,116,0.719,117,0.719,118,0.719,119,0.719,120,0.719,121,1.858,122,1.858,123,1.216,124,1.216,125,0.869,126,0.719,127,1.189,128,0.719,129,0.719,130,0.719,131,0.719,132,0.719,133,0.719,134,0.719,135,0.719,136,0.719,137,0.719,138,0.719,139,0.719,140,1.58,141,1.58,142,1.858,143,1.13,144,0.719,145,1.858,146,1.58,147,2.256,148,1.858,149,0.719,150,0.719,151,0.719,152,0.719,153,0.719,154,0.719,155,0.719,156,0.719,157,0.719,158,0.719,159,1.216,160,0.719,161,0.379,162,0.719,163,0.719]],["title/coverage.html",[164,1.843]],["body/coverage.html",[0,0.826,1,0.668,5,1.281,6,1.737,11,0.94,27,0.94,28,0.117,61,0.078,62,0.096,63,0.078,64,0.94,65,1.737,90,1.281,127,1.281,143,2.439,161,1.281,164,1.737,165,1.737,166,2.43,167,2.43,168,2.43,169,2.43,170,2.43,171,2.43,172,2.439,173,3.411,174,3.411,175,1.737,176,2.43,177,2.43]],["title/index.html",[17,0.626,178,1.156,179,1.156]],["body/index.html",[28,0.108,61,0.094,62,0.108,63,0.094]],["title/license.html",[178,1.156,179,1.156,180,1.156]],["body/license.html",[28,0.086,61,0.065,62,0.086,63,0.065,98,1.463,125,1.463,165,1.463,180,1.463,181,2.047,182,3.012,183,2.047,184,2.047,185,2.047,186,2.047,187,2.695,188,2.047,189,2.047,190,2.047,191,2.047,192,2.047,193,2.047,194,2.695,195,3.574,196,2.047,197,2.047,198,2.047,199,3.012,200,2.047,201,2.695,202,2.047,203,2.047,204,2.695,205,2.047,206,2.047,207,2.047,208,2.047,209,2.047,210,2.047,211,2.047,212,2.695,213,2.047,214,2.047,215,2.047,216,2.047,217,2.047,218,2.047,219,2.047,220,2.695,221,2.695,222,2.047,223,2.047,224,2.047,225,2.047,226,2.047,227,2.047,228,2.047,229,2.047,230,2.047,231,2.047,232,2.047,233,2.047,234,2.047,235,2.047,236,2.047,237,2.047,238,2.047,239,2.047,240,2.047,241,2.047,242,2.047,243,2.047,244,2.047,245,2.047,246,2.047,247,2.047,248,2.047,249,2.047,250,2.047]],["title/modules.html",[251,1.843]],["body/modules.html",[28,0.107,61,0.094,62,0.107,63,0.094,251,2.096]],["title/overview.html",[252,1.843]],["body/overview.html",[2,1.531,28,0.107,61,0.093,62,0.107,63,0.093,252,2.077,253,2.905]],["title/miscellaneous/variables.html",[254,1.156,255,1.64]],["body/miscellaneous/variables.html",[1,0.9,11,1.169,17,0.947,27,1.267,28,0.119,31,2.445,32,1.803,61,0.078,62,0.096,63,0.078,64,1.169,90,1.592,127,1.592,161,1.592,172,2.512,175,2.16,254,1.751,255,1.751,256,2.449]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":143,"title":{},"body":{"classes/DoublyLinkedList.html":{},"coverage.html":{}}}],["0/1",{"_index":174,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":115,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["14/15",{"_index":171,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":253,"title":{},"body":{"overview.html":{}}}],["2019",{"_index":184,"title":{},"body":{"license.html":{}}}],["4/5",{"_index":169,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":168,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":170,"title":{},"body":{"coverage.html":{}}}],["_data",{"_index":20,"title":{},"body":{"classes/DLNode.html":{}}}],["_end",{"_index":68,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["_length",{"_index":69,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["_next",{"_index":21,"title":{},"body":{"classes/DLNode.html":{}}}],["_previous",{"_index":22,"title":{},"body":{"classes/DLNode.html":{}}}],["_start",{"_index":70,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["above",{"_index":219,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":23,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["action",{"_index":245,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":210,"title":{},"body":{"license.html":{}}}],["arising",{"_index":248,"title":{},"body":{"license.html":{}}}],["array",{"_index":127,"title":{},"body":{"classes/DoublyLinkedList.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["associated",{"_index":196,"title":{},"body":{"license.html":{}}}],["authors",{"_index":238,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":123,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["bounds",{"_index":99,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["c",{"_index":183,"title":{},"body":{"license.html":{}}}],["charge",{"_index":191,"title":{},"body":{"license.html":{}}}],["claim",{"_index":241,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"overview.html":{}}}],["clear",{"_index":73,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["clears",{"_index":93,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["conditions",{"_index":218,"title":{},"body":{"license.html":{}}}],["connection",{"_index":249,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":24,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["contained",{"_index":34,"title":{},"body":{"classes/DLNode.html":{}}}],["contains",{"_index":12,"title":{},"body":{"classes/DLNode.html":{}}}],["contract",{"_index":246,"title":{},"body":{"license.html":{}}}],["copies",{"_index":212,"title":{},"body":{"license.html":{}}}],["copy",{"_index":194,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":182,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":164,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["currentnode",{"_index":159,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["damages",{"_index":242,"title":{},"body":{"license.html":{}}}],["dame",{"_index":185,"title":{},"body":{"license.html":{}}}],["data",{"_index":13,"title":{},"body":{"classes/DLNode.html":{}}}],["deal",{"_index":198,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":250,"title":{},"body":{"license.html":{}}}],["default",{"_index":31,"title":{},"body":{"classes/DLNode.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":25,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["delete",{"_index":74,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["delete(index",{"_index":95,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["deleted",{"_index":102,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["deleteend",{"_index":75,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["deletes",{"_index":94,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["deletestart",{"_index":76,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["deletion",{"_index":100,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["distribute",{"_index":208,"title":{},"body":{"license.html":{}}}],["dlnode",{"_index":1,"title":{"classes/DLNode.html":{}},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dlnode.ts",{"_index":6,"title":{},"body":{"classes/DLNode.html":{},"coverage.html":{}}}],["dlnode.ts:13",{"_index":35,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:18",{"_index":26,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:22",{"_index":39,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:25",{"_index":48,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:28",{"_index":52,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:32",{"_index":41,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:35",{"_index":50,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:38",{"_index":54,"title":{},"body":{"classes/DLNode.html":{}}}],["dlnode.ts:8",{"_index":33,"title":{},"body":{"classes/DLNode.html":{}}}],["documentation",{"_index":165,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doubly",{"_index":66,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist",{"_index":64,"title":{"classes/DoublyLinkedList.html":{}},"body":{"classes/DoublyLinkedList.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["doublylinkedlist.ts",{"_index":65,"title":{},"body":{"classes/DoublyLinkedList.html":{},"coverage.html":{}}}],["doublylinkedlist.ts:10",{"_index":91,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:134",{"_index":104,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:15",{"_index":87,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:155",{"_index":103,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:177",{"_index":96,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:20",{"_index":86,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:211",{"_index":107,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:228",{"_index":126,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:249",{"_index":92,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:28",{"_index":130,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:31",{"_index":134,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:34",{"_index":138,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:38",{"_index":132,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:41",{"_index":136,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:49",{"_index":120,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:57",{"_index":119,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:76",{"_index":117,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["doublylinkedlist.ts:96",{"_index":111,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["edge",{"_index":36,"title":{},"body":{"classes/DLNode.html":{}}}],["empty",{"_index":122,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["end",{"_index":84,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["event",{"_index":237,"title":{},"body":{"license.html":{}}}],["export",{"_index":55,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["express",{"_index":228,"title":{},"body":{"license.html":{}}}],["false",{"_index":124,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{}}}],["files",{"_index":197,"title":{},"body":{"license.html":{}}}],["first",{"_index":105,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["fitness",{"_index":233,"title":{},"body":{"license.html":{}}}],["following",{"_index":217,"title":{},"body":{"license.html":{}}}],["for(i=0",{"_index":160,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["free",{"_index":190,"title":{},"body":{"license.html":{}}}],["furnished",{"_index":215,"title":{},"body":{"license.html":{}}}],["getdata",{"_index":38,"title":{},"body":{"classes/DLNode.html":{}}}],["getend",{"_index":133,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["getlength",{"_index":137,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["getnext",{"_index":47,"title":{},"body":{"classes/DLNode.html":{}}}],["getnode",{"_index":77,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["getnode(index",{"_index":106,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["getprevious",{"_index":51,"title":{},"body":{"classes/DLNode.html":{}}}],["getstart",{"_index":129,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["getting",{"_index":178,"title":{"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":189,"title":{},"body":{"license.html":{}}}],["hereby",{"_index":188,"title":{},"body":{"license.html":{}}}],["holders",{"_index":239,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":166,"title":{},"body":{"coverage.html":{}}}],["if(index",{"_index":157,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["if(index==0",{"_index":155,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["if(this.end!=null",{"_index":153,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["if(this.isempty",{"_index":146,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["if(this.length==0",{"_index":162,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["if(this.start!=null",{"_index":150,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["implementation",{"_index":9,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["implied",{"_index":229,"title":{},"body":{"license.html":{}}}],["import",{"_index":139,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["included",{"_index":222,"title":{},"body":{"license.html":{}}}],["including",{"_index":201,"title":{},"body":{"license.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["insert",{"_index":78,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["insert(node",{"_index":110,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["inserted",{"_index":114,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["insertend",{"_index":79,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["insertend(node",{"_index":116,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["inserts",{"_index":112,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["insertstart",{"_index":80,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["insertstart(node",{"_index":118,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["isempty",{"_index":81,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["kind",{"_index":227,"title":{},"body":{"license.html":{}}}],["last",{"_index":88,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["length",{"_index":85,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["liability",{"_index":243,"title":{},"body":{"license.html":{}}}],["liable",{"_index":240,"title":{},"body":{"license.html":{}}}],["license",{"_index":180,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":202,"title":{},"body":{"license.html":{}}}],["limited",{"_index":230,"title":{},"body":{"license.html":{}}}],["linked",{"_index":67,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["list",{"_index":11,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["list.toarray",{"_index":256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lyngdoh",{"_index":186,"title":{},"body":{"license.html":{}}}],["matching",{"_index":62,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":232,"title":{},"body":{"license.html":{}}}],["merge",{"_index":206,"title":{},"body":{"license.html":{}}}],["methods",{"_index":71,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["miscellaneous",{"_index":254,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":181,"title":{},"body":{"license.html":{}}}],["modify",{"_index":205,"title":{},"body":{"license.html":{}}}],["modules",{"_index":251,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":43,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["new",{"_index":161,"title":{},"body":{"classes/DoublyLinkedList.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newnode",{"_index":175,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":15,"title":{},"body":{"classes/DLNode.html":{}}}],["node",{"_index":8,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["node.next",{"_index":149,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["node.previous",{"_index":152,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["nodes",{"_index":90,"title":{},"body":{"classes/DoublyLinkedList.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":236,"title":{},"body":{"license.html":{}}}],["notice",{"_index":220,"title":{},"body":{"license.html":{}}}],["null",{"_index":30,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["number",{"_index":89,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["obtaining",{"_index":193,"title":{},"body":{"license.html":{}}}],["occur",{"_index":101,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["optional",{"_index":44,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["order",{"_index":128,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["otherwise",{"_index":125,"title":{},"body":{"classes/DoublyLinkedList.html":{},"license.html":{}}}],["out",{"_index":98,"title":{},"body":{"classes/DoublyLinkedList.html":{},"license.html":{}}}],["overview",{"_index":252,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["param",{"_index":145,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["parameters",{"_index":42,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["particular",{"_index":234,"title":{},"body":{"license.html":{}}}],["permission",{"_index":187,"title":{},"body":{"license.html":{}}}],["permit",{"_index":213,"title":{},"body":{"license.html":{}}}],["person",{"_index":192,"title":{},"body":{"license.html":{}}}],["persons",{"_index":214,"title":{},"body":{"license.html":{}}}],["pointer",{"_index":37,"title":{},"body":{"classes/DLNode.html":{}}}],["pointers",{"_index":14,"title":{},"body":{"classes/DLNode.html":{}}}],["portions",{"_index":224,"title":{},"body":{"license.html":{}}}],["previous",{"_index":16,"title":{},"body":{"classes/DLNode.html":{}}}],["private",{"_index":19,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["properties",{"_index":18,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["provided",{"_index":225,"title":{},"body":{"license.html":{}}}],["public",{"_index":72,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["publish",{"_index":207,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":235,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":200,"title":{},"body":{"license.html":{}}}],["result",{"_index":61,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":63,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":109,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["retrieves",{"_index":108,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["return",{"_index":56,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["returns",{"_index":45,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["rights",{"_index":203,"title":{},"body":{"license.html":{}}}],["sell",{"_index":211,"title":{},"body":{"license.html":{}}}],["set",{"_index":60,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["setdata(data",{"_index":40,"title":{},"body":{"classes/DLNode.html":{}}}],["setend(end",{"_index":135,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["setnext(next",{"_index":49,"title":{},"body":{"classes/DLNode.html":{}}}],["setprevious(previous",{"_index":53,"title":{},"body":{"classes/DLNode.html":{}}}],["setstart(start",{"_index":131,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["shall",{"_index":221,"title":{},"body":{"license.html":{}}}],["software",{"_index":195,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["specific",{"_index":97,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["specified",{"_index":113,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["start",{"_index":83,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["started",{"_index":179,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":167,"title":{},"body":{"coverage.html":{}}}],["subject",{"_index":216,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":209,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":223,"title":{},"body":{"license.html":{}}}],["t",{"_index":29,"title":{},"body":{"classes/DLNode.html":{}}}],["table",{"_index":177,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":176,"title":{},"body":{"coverage.html":{}}}],["test.ts",{"_index":172,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["this._data",{"_index":57,"title":{},"body":{"classes/DLNode.html":{}}}],["this._end",{"_index":141,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this._length",{"_index":142,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this._next",{"_index":58,"title":{},"body":{"classes/DLNode.html":{}}}],["this._previous",{"_index":59,"title":{},"body":{"classes/DLNode.html":{}}}],["this._start",{"_index":140,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.end",{"_index":148,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.end.next",{"_index":154,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.insertend(node",{"_index":158,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.insertstart(node",{"_index":156,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.length==0",{"_index":144,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.start",{"_index":147,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["this.start.previous",{"_index":151,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["toarray",{"_index":82,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["tort",{"_index":247,"title":{},"body":{"license.html":{}}}],["true",{"_index":121,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["type",{"_index":27,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["use",{"_index":204,"title":{},"body":{"license.html":{}}}],["value",{"_index":32,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":173,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":255,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vertex",{"_index":10,"title":{},"body":{"classes/DLNode.html":{}}}],["void",{"_index":46,"title":{},"body":{"classes/DLNode.html":{},"classes/DoublyLinkedList.html":{}}}],["warranties",{"_index":231,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":226,"title":{},"body":{"license.html":{}}}],["whether",{"_index":244,"title":{},"body":{"license.html":{}}}],["while(currentnode!=null",{"_index":163,"title":{},"body":{"classes/DoublyLinkedList.html":{}}}],["without",{"_index":199,"title":{},"body":{"license.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DLNode.html":{"url":"classes/DLNode.html","title":"class - DLNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DLNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            dlnode.ts\n        \n\n            \n                Description\n            \n            \n                Node implementation class. A node is a vertex in the list which contains data and pointers to the next node and previous node.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _data\n                            \n                            \n                                    Private\n                                _next\n                            \n                            \n                                    Private\n                                _previous\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    data\n                                \n                                \n                                    next\n                                \n                                \n                                    previous\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in dlnode.ts:18\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     T | null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in dlnode.ts:8\n                            \n                        \n\n                \n                    \n                        The data contained in the node.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _next\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DLNode | null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in dlnode.ts:13\n                            \n                        \n\n                \n                    \n                        The edge or pointer to the next node.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _previous\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DLNode | null\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in dlnode.ts:18\n                            \n                        \n\n                \n                    \n                        The edge or pointer to the previous node.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:22\n                                \n                            \n\n                \n                    \n                        setdata(data)\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:32\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            data\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        next\n                    \n                \n\n                \n                    \n                        getnext()\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:25\n                                \n                            \n\n                \n                    \n                        setnext(next)\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:35\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            next\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        previous\n                    \n                \n\n                \n                    \n                        getprevious()\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:28\n                                \n                            \n\n                \n                    \n                        setprevious(previous)\n                    \n                \n                            \n                                \n                                    Defined in dlnode.ts:38\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            previous\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        export class DLNode {\n    /**\n     * The data contained in the node.\n     */\n    private _data : T | null = null;\n    \n    /**\n     * The edge or pointer to the next node.\n     */\n    private _next : DLNode | null = null;\n    \n    /**\n     * The edge or pointer to the previous node.\n     */\n    private _previous : DLNode | null = null;\n\n    constructor() {}\n\n    get data() : T | null {\n        return this._data;\n    }\n    get next() : DLNode | null {\n        return this._next;\n    }\n    get previous() : DLNode | null {\n        return this._previous;\n    }\n\n    set data( data : T | null ) {\n        this._data = data;\n    }\n    set next( next : DLNode | null ) {\n        this._next = next;\n    }\n    set previous( previous : DLNode | null ) {\n        this._previous = previous;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DoublyLinkedList.html":{"url":"classes/DoublyLinkedList.html","title":"class - DoublyLinkedList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DoublyLinkedList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            doublyLinkedList.ts\n        \n\n            \n                Description\n            \n            \n                Doubly Linked-List implementation class.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _end\n                            \n                            \n                                    Private\n                                _length\n                            \n                            \n                                    Private\n                                _start\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                deleteEnd\n                            \n                            \n                                    Public\n                                deleteStart\n                            \n                            \n                                    Public\n                                getNode\n                            \n                            \n                                    Public\n                                insert\n                            \n                            \n                                    Public\n                                insertEnd\n                            \n                            \n                                    Public\n                                insertStart\n                            \n                            \n                                    Public\n                                isEmpty\n                            \n                            \n                                    Public\n                                toArray\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    start\n                                \n                                \n                                    end\n                                \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in doublyLinkedList.ts:20\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _end\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DLNode | null\n\n                        \n                    \n                        \n                            \n                                    Defined in doublyLinkedList.ts:15\n                            \n                        \n\n                \n                    \n                        The last  node of the list.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _length\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in doublyLinkedList.ts:20\n                            \n                        \n\n                \n                    \n                        The number of nodes in the list.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _start\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DLNode | null\n\n                        \n                    \n                        \n                            \n                                    Defined in doublyLinkedList.ts:10\n                            \n                        \n\n                \n                    \n                        The start node of the list.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:249\n                \n            \n\n\n            \n                \n                    Clears the list and deletes all nodes.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(index: number)\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:177\n                \n            \n\n\n            \n                \n                    Deletes a node from a specific index in the list. If the index is out of bounds, then no deletion will occur.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The index of the node to be deleted.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteEnd\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEnd()\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:155\n                \n            \n\n\n            \n                \n                    Deletes the last node from the list.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteStart\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteStart()\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:134\n                \n            \n\n\n            \n                \n                    Deletes the first node from the list.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNode(index: number)\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:211\n                \n            \n\n\n            \n                \n                    Retrieves a node from the specific index.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The index from which to retrieve the node.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DLNode | null\n\n                    \n                    \n                        Returns the node at the specific index or null if the index is out of bounds.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            insert\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insert(node: DLNode, index: number)\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:96\n                \n            \n\n\n            \n                \n                    Inserts a node at the specified index in the list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DLNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The node to be inserted to the list.\n\n                                    \n                                \n                                \n                                    index\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The index to insert the node at. A value of -1 will insert the node to the end of the list.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            insertEnd\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insertEnd(node: DLNode)\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:76\n                \n            \n\n\n            \n                \n                    Inserts a node to the end of the list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DLNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The node to be inserted to the list.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            insertStart\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    insertStart(node: DLNode)\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:57\n                \n            \n\n\n            \n                \n                    Inserts a node to the start of the list.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                DLNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The node to be inserted to the list.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isEmpty\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmpty()\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:49\n                \n            \n\n\n            \n                \n                    Returns true if the list is empty.\n\n\n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Returns true if list is empty or false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toArray\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toArray()\n                \n            \n\n\n            \n                \n                    Defined in doublyLinkedList.ts:228\n                \n            \n\n\n            \n                \n                    Returns an array of the nodes in the order of the list.\n\n\n                    \n                    \n                    \n                        Returns :         Array>\n\n                    \n                    \n                        Array of nodes.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        start\n                    \n                \n\n                \n                    \n                        getstart()\n                    \n                \n                            \n                                \n                                    Defined in doublyLinkedList.ts:28\n                                \n                            \n\n                \n                    \n                        setstart(start)\n                    \n                \n                            \n                                \n                                    Defined in doublyLinkedList.ts:38\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            start\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        end\n                    \n                \n\n                \n                    \n                        getend()\n                    \n                \n                            \n                                \n                                    Defined in doublyLinkedList.ts:31\n                                \n                            \n\n                \n                    \n                        setend(end)\n                    \n                \n                            \n                                \n                                    Defined in doublyLinkedList.ts:41\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            end\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in doublyLinkedList.ts:34\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { DLNode } from \"./dlnode\";\n\n/**\n * Doubly Linked-List implementation class.\n */\nexport class DoublyLinkedList {\n    /**\n     * The start node of the list.\n     */\n    private _start : DLNode | null;\n    \n    /**\n     * The last  node of the list.\n     */\n    private _end : DLNode | null;\n    \n    /**\n     * The number of nodes in the list.\n     */\n    private _length : number;\n\n    constructor() {\n        this._start = null;\n        this._end = null;\n        this._length = 0;\n    }\n\n    get start() : DLNode | null {\n        return this._start;\n    }\n    get end() : DLNode | null {\n        return this._end;\n    }\n    get length() : number {\n        return this._length;\n    }\n\n    set start( start : DLNode | null ) {\n        this._start = start;\n    }\n    set end( end : DLNode | null ) {\n        this._end = end;\n    }\n\n    /**\n     * Returns true if the list is empty.\n     * @returns Returns true if list is empty or false otherwise.\n     */\n    public isEmpty() : boolean {\n        return this.length==0;\n    }\n\n    /**\n     * Inserts a node to the start of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertStart( node : DLNode ) : void {\n        if(this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.next = this.start;\n            if(this.start!=null) {\n                this.start.previous = node;\n            }\n            this.start = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node to the end of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertEnd( node : DLNode ) : void {\n        if(this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.previous = this.end;\n            if(this.end!=null){\n                this.end.next = node;\n            }\n            this.end = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node at the specified index in the list.\n     * @param node The node to be inserted to the list.\n     * @param index The index to insert the node at. A value of -1 will insert the node to the end of the list.\n     */\n    public insert( node : DLNode, index : number ) : void {\n        if(index==0) {\n            this.insertStart(node);\n            return;\n        }\n        else if(index==-1) {\n            this.insertEnd(node);\n            return;\n        }\n\n        let currentNode = this.start;\n        let i : number = 0;\n        for(i=0; i | null {\n        if(this.isEmpty() || index > {\n        let array : DLNode[] = new Array>();\n        \n        if(this.length==0) {\n            return array;\n        }\n        \n        let i = 0;\n\n        let currentNode : DLNode | null = this.start;\n        while(currentNode!=null && i \n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                dlnode.ts\n            \n            class\n            DLNode\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                doublyLinkedList.ts\n            \n            class\n            DoublyLinkedList\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                test.ts\n            \n            variable\n            array\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test.ts\n            \n            variable\n            list\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test.ts\n            \n            variable\n            newNode\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test.ts\n            \n            variable\n            nodes\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Dame Lyngdoh\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            array   (test.ts)\n                        \n                        \n                            list   (test.ts)\n                        \n                        \n                            newNode   (test.ts)\n                        \n                        \n                            nodes   (test.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            array\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : list.toArray()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            list\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DoublyLinkedList\n\n                        \n                    \n                    \n                        \n                            Default value : new DoublyLinkedList()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newNode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DLNode\n\n                        \n                    \n                    \n                        \n                            Default value : new DLNode()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DLNode[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
